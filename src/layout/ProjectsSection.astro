---
export interface Props {
    projects: {
        id: string;
        title: string;
        description: string;
        image: string;
        alt: string;
        technologies: string[];
        demoUrl?: string;
        repoUrl?: string;
    }[];
}

const { projects } = Astro.props;
---

<section class="projects-section" aria-labelledby="projects-title">
    <div class="container">
        <h2 id="projects-title" class="section-title">Mis Proyectos</h2>
        <p class="section-description">Explora algunos de mis trabajos más destacados</p>
        
        <div class="carousel-container" role="region" aria-label="Carrusel de proyectos">
            <div class="projects-carousel" id="projects-carousel">
                {projects.map((project, index) => (
                    <article 
                        class="project-card" 
                        data-project-index={index}
                        itemscope 
                        itemtype="https://schema.org/CreativeWork"
                    >
                        <div class="project-image">
                            <img 
                                src={project.image} 
                                alt={project.alt}
                                loading="lazy"
                                itemprop="image"
                            />
                            <div class="project-overlay">
                                <div class="project-links">
                                    {project.demoUrl && (
                                        <a 
                                            href={project.demoUrl} 
                                            target="_blank" 
                                            rel="noopener noreferrer"
                                            aria-label={`Ver demo de ${project.title}`}
                                        >
                                            Ver Demo
                                        </a>
                                    )}
                                    {project.repoUrl && (
                                        <a 
                                            href={project.repoUrl} 
                                            target="_blank" 
                                            rel="noopener noreferrer"
                                            aria-label={`Ver código de ${project.title}`}
                                        >
                                            Ver Código
                                        </a>
                                    )}
                                </div>
                            </div>
                        </div>
                        <div class="project-content">
                            <h3 class="project-title" itemprop="name">{project.title}</h3>
                            <p class="project-description" itemprop="description">{project.description}</p>
                            <div class="project-technologies">
                                {project.technologies.map(tech => (
                                    <span class="tech-tag" itemprop="keywords">{tech}</span>
                                ))}
                            </div>
                        </div>
                    </article>
                ))}
            </div>
            
            <button 
                class="carousel-btn carousel-prev" 
                id="prev-btn"
                aria-label="Proyecto anterior"
            >
                <span>‹</span>
            </button>
            <button 
                class="carousel-btn carousel-next" 
                id="next-btn"
                aria-label="Siguiente proyecto"
            >
                <span>›</span>
            </button>
        </div>
        
        <div class="carousel-indicators" role="tablist" aria-label="Indicadores de proyectos">
            {projects.map((_, index) => (
                <button
                    class={`indicator ${index === 0 ? 'active' : ''}`}
                    data-slide={index}
                    role="tab"
                    aria-label={`Ir al proyecto ${index + 1}`}
                ></button>
            ))}
        </div>
    </div>
</section>

<style>
    .projects-section {
        padding: 4rem 0;
        background: var(--bg-color, #f8f9fa);
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 2rem;
    }

    .section-title {
        font-size: 2.5rem;
        text-align: center;
        margin-bottom: 1rem;
        color: var(--text-color, #333);
    }

    .section-description {
        text-align: center;
        margin-bottom: 3rem;
        color: var(--text-secondary, #666);
        font-size: 1.1rem;
    }

    .carousel-container {
        position: relative;
        overflow: hidden;
        border-radius: 12px;
    }

    .projects-carousel {
        display: flex;
        transition: transform 0.3s ease;
        gap: 2rem;
    }

    .project-card {
        flex: 0 0 100%;
        background: white;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        transition: transform 0.3s ease;
    }

    .project-card:hover {
        transform: translateY(-5px);
    }

    .project-image {
        position: relative;
        aspect-ratio: 16/10;
        overflow: hidden;
    }

    .project-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .project-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.7);
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .project-card:hover .project-overlay {
        opacity: 1;
    }

    .project-links {
        display: flex;
        gap: 1rem;
    }

    .project-links a {
        padding: 0.5rem 1rem;
        background: var(--accent-color, #007bff);
        color: white;
        text-decoration: none;
        border-radius: 6px;
        transition: background 0.3s ease;
    }

    .project-links a:hover {
        background: var(--accent-hover, #0056b3);
    }

    .project-content {
        padding: 1.5rem;
    }

    .project-title {
        font-size: 1.5rem;
        margin-bottom: 0.5rem;
        color: var(--text-color, #333);
    }

    .project-description {
        color: var(--text-secondary, #666);
        margin-bottom: 1rem;
        line-height: 1.6;
    }

    .project-technologies {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .tech-tag {
        padding: 0.25rem 0.75rem;
        background: var(--tag-bg, #e9ecef);
        color: var(--tag-color, #495057);
        border-radius: 20px;
        font-size: 0.875rem;
    }

    .carousel-btn {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        background: rgba(29, 78, 216, 0.8); /* bg-blue-700 con 80% opacidad */
        color: white;
        border: none;
        width: 50px;
        height: 50px;
        border-radius: 50%;
        cursor: pointer;
        transition: background 0.3s ease;
        z-index: 2;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0;
    }
    
    .carousel-btn span {
        font-size: 2rem;
        line-height: 1;
        display: block;
        margin-top: -6px; /* Ajuste fino para compensar el alineamiento visual */
    }

    .carousel-btn:hover {
        background: rgba(29, 78, 216, 1); /* bg-blue-700 con 100% opacidad al hover */
    }

    .carousel-prev {
        left: 1rem;
    }

    .carousel-next {
        right: 1rem;
    }

    .carousel-indicators {
        display: flex;
        justify-content: center;
        gap: 0.5rem;
        margin-top: 2rem;
    }

    .indicator {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        border: none;
        background: #ccc;
        cursor: pointer;
        transition: background 0.3s ease;
    }

    .indicator.active {
        background: var(--accent-color, #007bff);
    }

    @media (min-width: 768px) {
        .project-card {
            flex: 0 0 calc(50% - 1rem);
        }
    }

    @media (min-width: 1024px) {
        .project-card {
            flex: 0 0 calc(33.333% - 1.33rem);
        }
    }
</style>

<script>
    class ProjectCarousel {
        carousel: HTMLElement | null;
        prevBtn: HTMLElement | null;
        nextBtn: HTMLElement | null;
        indicators: NodeListOf<Element>;
        currentIndex: number;
        totalSlides: number;

        constructor() {
            this.carousel = document.getElementById('projects-carousel');
            this.prevBtn = document.getElementById('prev-btn');
            this.nextBtn = document.getElementById('next-btn');
            this.indicators = document.querySelectorAll('.indicator');
            this.currentIndex = 0;
            this.totalSlides = this.indicators.length;
            
            this.init();
        }

        init() {
            this.prevBtn?.addEventListener('click', () => this.prevSlide());
            this.nextBtn?.addEventListener('click', () => this.nextSlide());
            
            this.indicators.forEach((indicator, index) => {
                indicator.addEventListener('click', () => this.goToSlide(index));
            });

            // Auto-play
            this.startAutoPlay();
        }

        prevSlide() {
            this.currentIndex = this.currentIndex === 0 ? this.totalSlides - 1 : this.currentIndex - 1;
            this.updateCarousel();
        }

        nextSlide() {
            this.currentIndex = this.currentIndex === this.totalSlides - 1 ? 0 : this.currentIndex + 1;
            this.updateCarousel();
        }

        goToSlide(index: number) {
            this.currentIndex = index;
            this.updateCarousel();
        }

        updateCarousel() {
            if (this.carousel) {
                const cardWidth = (this.carousel.querySelector('.project-card') as HTMLElement)?.offsetWidth || 0;
                const gap = 32; // 2rem gap
                const offset = -(this.currentIndex * (cardWidth + gap));
                this.carousel.style.transform = `translateX(${offset}px)`;
            }

            this.indicators.forEach((indicator, index) => {
                indicator.classList.toggle('active', index === this.currentIndex);
            });
        }

        startAutoPlay() {
            setInterval(() => {
                this.nextSlide();
            }, 5000);
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        new ProjectCarousel();
    });
</script>